        -:    0:Source:bmparser.c
        -:    0:Programs:5
        -:    1:/* Copyright (c) 2006 Johan Ersfolk, Richard Westerb�ck, �bo Akademi
        -:    2: *
        -:    3: * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
        -:    4: * associated documentation files (the "Software"), to deal in the Software without restriction, 
        -:    5: * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
        -:    6: * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
        -:    7: * subject to the following conditions:
        -:    8: *
        -:    9: * The above copyright notice and this permission notice shall be included in all copies or substantial 
        -:   10: * portions of the Software.
        -:   11: *
        -:   12: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
        -:   13: * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
        -:   14: * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
        -:   15: * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
        -:   16: * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        -:   17: */
        -:   18:
        -:   19:/* A simple bit-map parser
        -:   20: * The picture must be a 24-bit precision bitmap picture
        -:   21: */
        -:   22: 
        -:   23:#include <stdio.h>
        -:   24:#include <malloc.h>
        -:   25:#include "bmparser.h"
        -:   26:#include "colorspace.h"
        -:   27:
        -:   28:BITMAPFILEHEADER file_h;
        -:   29:BITMAPINFOHEADER info_h;
        -:   30:
        -:   31:RGBPixel blackPixel; // used for padding the image size to a multiple of 8
        -:   32:
        -:   33:/* Extracts an array of pixel structs from a file
        -:   34: */
        1:   35:void bm_get_pixel_array(char* file_name, RGBPixel** pixel_array){
        1:   36:   blackPixel.red   = 0;
        1:   37:   blackPixel.green = 0;
        1:   38:   blackPixel.blue  = 0;
        -:   39:   
        -:   40:   FILE* input;
        -:   41:   unsigned char buffer[54];
        -:   42:   int num_pixels,i,j;
        -:   43:
        1:   44:   input = fopen( file_name, "rb" );
        -:   45:
        1:   46:   if (input == NULL)
        1:   47:     return;
        -:   48:
        1:   49:   fread( buffer, 54, 1, input );
        -:   50:
        1:   51:   file_h.size         =  (unsigned long)buffer[2];
        1:   52:   file_h.offsetbits   =  (int)buffer[10];
        1:   53:   info_h.width        =  (int)buffer[18] | ((int)buffer[19])<<8;
        1:   54:   info_h.height       =  (int)buffer[22] | ((int)buffer[23])<<8;
        -:   55:
        -:   56:   /* Move the file pointer to the start of the pixel area */
        1:   57:   fseek( input, file_h.offsetbits, SEEK_SET );
        -:   58:
        1:   59:   num_pixels = info_h.width * info_h.height;
        1:   60:   *pixel_array = ( RGBPixel* ) malloc ( sizeof( RGBPixel ) * num_pixels );
        -:   61:   
        1:   62:   int padding = 0;
        1:   63:   if ((info_h.width * 3) % 4) {
    #####:   64:     padding = 4 - (info_h.width * 3) % 4; // must be multiple of 4
        -:   65:   }
        -:   66:   
   307201:   67:   for(i=0; i< num_pixels ;i++){
   307200:   68:      (*pixel_array)[i].blue  = (unsigned char)fgetc(input);
   307200:   69:      (*pixel_array)[i].green = (unsigned char)fgetc(input);
   307200:   70:      (*pixel_array)[i].red   = (unsigned char)fgetc(input);
   307200:   71:      if ( (i % info_h.width) == info_h.width-1 ) { // remove padding bytes
      480:   72:        for (j=0; j<padding; j++) { fgetc(input); }
        -:   73:      }
        -:   74:   }
        -:   75:   
        1:   76:   fclose(input);
        -:   77:}
        -:   78:
        -:   79:
        -:   80:/*
        -:   81: * Returns a pixel given the indices x= [0..m-1] y = [0..n-1] 
        -:   82: * m,n = size in dim x ,dim y
        -:   83: *
        -:   84: */
   921600:   85:RGBPixel* bm_get_pixel_at(unsigned int x, unsigned int y, RGBPixel* pixel_array){
   921600:   86:   if (x >= info_h.width || y >= info_h.height) {return &blackPixel;} // instead of padding
   921600:   87:   int width_with_padding = info_h.width;
   921600:   88:   int index = ((info_h.height-1-(y)) * (width_with_padding) + x);
   921600:   89:   return (pixel_array + index );
        -:   90:}
        -:   91:
        -:   92:/* Returns the pixel in a natural order (with index 0 being the top/left pixel),
        -:   93: * this function assumes that every row is a multiple of 8
        -:   94: */
   921600:   95:RGBPixel* bm_get_pixel(int index, RGBPixel* pixel_array){
   921600:   96:  int width_with_padding = info_h.width;
   921600:   97:  if (width_with_padding %8) width_with_padding  += 8-width_with_padding%8;
   921600:   98:  return bm_get_pixel_at(index % width_with_padding, index / width_with_padding, pixel_array);
        -:   99:}
        -:  100:
        -:  101:
        -:  102:
        -:  103:
